// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]
  incomes       Income[]
  categories    Category[]
  expenses      Expenses[]

  @@unique([email])
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])

}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt


}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt


}

model Income {
  id        String    @id @default(cuid())
  name      String
  value     Float
  frequency Frequency
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
}

enum Frequency {
  UNIQUE
  DAILY
  MONTHLY

}

model Category {
  id        String   @id @default(cuid())
  name      String
  color     String   @db.VarChar(7)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  expenses  Expenses[]
}

model Expenses {
  id          String    @id @default(cuid())
  name        String
  value       Float
  frequency   Frequency
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt


  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String

  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  String?
}